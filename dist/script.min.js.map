{"version":3,"sources":["script.js"],"names":["board","currentPlayer","gameActive","document","getElementById","aiMode","querySelectorAll","playerMove","index","cells","textContent","statusDisplay","concat","cell","aiMove","move","bestScore","Infinity","i","length","score","minimax","newBoard","depth","isMaximizing","checkWinner","Math","max","min","player","some","pattern","restartGame","winPatterns","toggleMode","forEach","getAttribute","setTimeout"],"mappings":"aAAA,IAAIA,MAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzCC,cAAgB,IADhBD,YAAa,EACbC,QAAAA,EACAC,cAAJC,SAAAC,eAAA,UACIC,MAASF,SAAMG,iBAAA,SAmBlB,SAfDC,WAAAC,GAkBER,MAAMQ,GAASP,cADjBQ,MAAAD,GAASD,YAAkBN,cAEzBQ,YAAaC,MAAAA,gBAGXC,cAAcD,YAAd,aAAAE,OAAyCX,cAAzC,UADFC,YAAe,GACbS,MAAcD,MAAAA,SAAAA,GAAd,MAAA,KAAAG,KACAX,cAAaQ,YAAb,kBAFFR,YAGWF,IAAJC,cAAsC,MAAAA,cAAA,IAAA,IAC3CU,cAAcD,YAAdC,UAAAA,OAA4BV,cAA5BU,YAKD,SAAAG,SAOD,IAJF,IAGMC,EAHNC,GAAAC,EAAAA,EAIWC,EAAI,EAAGA,EAAIlB,MAAMmB,OAAQD,IAHpC,GAAkB,KAAlBlB,MAASc,GAAS,CACZE,MAAAA,GAAS,IACTD,IAAJK,EAAAC,QAAArB,MAAA,GAAA,GAKIA,MAAMkB,GAAK,GAJCA,EAAXE,IACCpB,EAAAoB,EACFpB,EAAAkB,GAGAjB,cAAYe,IACVA,WAAAA,GACAD,cAAA,IAGL,SAAAM,QAAAC,EAAAC,EAAAC,GAOD,GAAIC,YAAYH,EAAU,KAAM,OAAO,GAAKC,EAN5CtB,GAAAA,YAAgBqB,EAAhB,KAAA,OAAAC,EAAA,GACAhB,GAAAA,EAAWQ,MAAX,SAAAF,GAAA,MAAA,KAAAA,IAAA,OAAA,EAED,GAAAW,EAAA,CAED,IAMI,IAAIR,GAAaC,EAAAA,EANZI,EAAQC,EAAAA,EAAAA,EAAjBH,OAAkCK,IAC5BC,GAAW,KAAXA,EAAYH,GAAU,CACtBG,EAAWP,GAACI,IACZA,IAAAA,EAAAD,QAAeC,EAAIC,EAAA,GAAA,GAAAD,EAAQJ,GAAR,GAAkBF,EAAAU,KAAAC,IAAAP,EAAAJ,GAGvC,OAAIA,EAEF,IADF,IAAAA,EAAgBE,EAAAA,EACVI,EAAAA,EAAQJ,EAARI,EAAoBH,OAAAD,IACtBI,GAAA,KAAAA,EAAAJ,GAAA,CACAI,EAASJ,GAAGG,IACZC,IAAAA,EAAAD,QAAAC,EAAAC,EAAA,GAAA,GACAP,EAASE,GAAGQ,GACbV,EAAAU,KAAAE,IAAAR,EAAAJ,GAEH,OAAOA,EAGP,SAAKS,YAAWP,EAACW,GAIbP,MAHE,CACFA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EAAQ,EAACJ,GAAT,CAAc,EAAA,EAAd,GAaJ,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAZnB,CAAA,EAAA,EAAA,GAAIE,CAAAA,EAAAA,EAAK,IACTU,KAAA,SAAAC,GAAA,OACAf,EAAAA,MAAS,SAAAR,GAAGkB,OAAKE,EAALpB,KAAgBQ,MAGhC,SAAAgB,cACDhC,MAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACFC,cAAA,IAgBCC,YAAa,EAdfS,cAASc,YAATpB,OAAgC,oCAAA,iCAC9BI,MAAMwB,QAAAA,SAAAA,GAAc,OAClBpB,EAAAH,YAAkB,KAKC,SAAAwB,aAAA7B,QADUA,OAAA2B,cAGhCrB,cAAAD,YAAAL,OAAA,6BAAA,iCA/FDI,MAAME,QAAAA,SAAAA,GACNE,EAAMJ,iBAAiBH,QAAAA,WAEvBG,IAAM0B,EAAQtB,EAAAuB,aAAQ,cAECA,KAAb5B,MAAKA,IAAQ4B,aAGb/B,QAA4B,MAAlBJ,eAAdM,WAAUC,GACRN,YAAAmC,WAAAvB,OAAA,MACUT,QAFZE,WAIYF","file":"script.min.js","sourcesContent":["let board = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\nlet currentPlayer = \"X\";\r\nlet gameActive = true;\r\nlet aiMode = true; // start with AI \r\nconst statusDisplay = document.getElementById(\"status\");\r\nconst cells = document.querySelectorAll(\".cell\");\r\n\r\ncells.forEach(cell => {\r\n  cell.addEventListener(\"click\", () => {\r\n    const index = cell.getAttribute(\"data-index\");\r\n\r\n    if (board[index] === \"\" && gameActive) {\r\n      if (aiMode && currentPlayer === \"X\") {\r\n        // Human \r\n        playerMove(index);\r\n        if (gameActive) setTimeout(aiMove, 500);\r\n      } else if (!aiMode) {\r\n        // 2-player mode \r\n        playerMove(index);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nfunction playerMove(index) {\r\n  board[index] = currentPlayer;\r\n  cells[index].textContent = currentPlayer;\r\n\r\n  if (checkWinner(board, currentPlayer)) {\r\n    statusDisplay.textContent = `üéâ Player ${currentPlayer} Wins!`;\r\n    gameActive = false;\r\n  } else if (board.every(cell => cell !== \"\")) {\r\n    statusDisplay.textContent = \"ü§ù It's a Draw!\";\r\n    gameActive = false;\r\n  } else {\r\n    currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\r\n    statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;\r\n  }\r\n}\r\n\r\n// ---- AI  ----\r\nfunction aiMove() {\r\n  let bestScore = -Infinity;\r\n  let move;\r\n  for (let i = 0; i < board.length; i++) {\r\n    if (board[i] === \"\") {\r\n      board[i] = \"O\";\r\n      let score = minimax(board, 0, false);\r\n      board[i] = \"\";\r\n      if (score > bestScore) {\r\n        bestScore = score;\r\n        move = i;\r\n      }\r\n    }\r\n  }\r\n  currentPlayer = \"O\";\r\n  playerMove(move);\r\n  currentPlayer = \"X\"; // return control to human\r\n}\r\n\r\nfunction minimax(newBoard, depth, isMaximizing) {\r\n  if (checkWinner(newBoard, \"O\")) return 10 - depth;\r\n  if (checkWinner(newBoard, \"X\")) return depth - 10;\r\n  if (newBoard.every(cell => cell !== \"\")) return 0;\r\n\r\n  if (isMaximizing) {\r\n    let bestScore = -Infinity;\r\n    for (let i = 0; i < newBoard.length; i++) {\r\n      if (newBoard[i] === \"\") {\r\n        newBoard[i] = \"O\";\r\n        let score = minimax(newBoard, depth + 1, false);\r\n        newBoard[i] = \"\";\r\n        bestScore = Math.max(score, bestScore);\r\n      }\r\n    }\r\n    return bestScore;\r\n  } else {\r\n    let bestScore = Infinity;\r\n    for (let i = 0; i < newBoard.length; i++) {\r\n      if (newBoard[i] === \"\") {\r\n        newBoard[i] = \"X\";\r\n        let score = minimax(newBoard, depth + 1, true);\r\n        newBoard[i] = \"\";\r\n        bestScore = Math.min(score, bestScore);\r\n      }\r\n    }\r\n    return bestScore;\r\n  }\r\n}\r\n\r\nfunction checkWinner(b, player) {\r\n  const winPatterns = [\r\n    [0,1,2], [3,4,5], [6,7,8],\r\n    [0,3,6], [1,4,7], [2,5,8],\r\n    [0,4,8], [2,4,6]\r\n  ];\r\n  return winPatterns.some(pattern =>\r\n    pattern.every(index => b[index] === player)\r\n  );\r\n}\r\n\r\nfunction restartGame() {\r\n  board = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n  currentPlayer = \"X\";\r\n  gameActive = true;\r\n  statusDisplay.textContent = aiMode ? \"AI Mode: Player X vs Computer (O)\" : \"2 Player Mode: Player X starts\";\r\n  cells.forEach(cell => cell.textContent = \"\");\r\n}\r\n\r\nfunction toggleMode() {\r\n  aiMode = !aiMode;\r\n  restartGame();\r\n  statusDisplay.textContent = aiMode ? \"AI Mode: Hard (Unbeatable)\" : \"2 Player Mode: Player X starts\";\r\n}\r\n"]}